
Two Segments on Single Port.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000354  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000354  000003e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  0080006a  0080006a  000003f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000424  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e1c  00000000  00000000  00000550  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007b7  00000000  00000000  0000136c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000797  00000000  00000000  00001b23  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000018c  00000000  00000000  000022bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005cb  00000000  00000000  00002448  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000516  00000000  00000000  00002a13  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00002f29  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e5       	ldi	r30, 0x54	; 84
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 37       	cpi	r26, 0x71	; 113
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 19 01 	call	0x232	; 0x232 <main>
  8a:	0c 94 a8 01 	jmp	0x350	; 0x350 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <AppInitialize>:
#include "APP.h"

/* Initialize Application */
void AppInitialize (void)
{
 AppInit ();
  92:	0e 94 a0 00 	call	0x140	; 0x140 <AppInit>
  96:	08 95       	ret

00000098 <AppStart>:
}

// Starting Application
void AppStart (void)
{
 App_Start ();
  98:	0e 94 b9 00 	call	0x172	; 0x172 <App_Start>
  9c:	08 95       	ret

0000009e <Segment7_VidInit>:
	seven,
	eight,
nine};

void Segment7_VidInit(u8 u8PortCopy, u8 u8ComPortCopy, u8 u8ComPinCopy, u8 u8ComPinTypeCopy)
{
  9e:	0f 93       	push	r16
  a0:	1f 93       	push	r17
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
  a6:	08 2f       	mov	r16, r24
  a8:	16 2f       	mov	r17, r22
  aa:	d4 2f       	mov	r29, r20
  ac:	c2 2f       	mov	r28, r18
	DIO_SetPortDirection(u8PortCopy, PORT_OUTPUT);
  ae:	6f ef       	ldi	r22, 0xFF	; 255
  b0:	0e 94 96 01 	call	0x32c	; 0x32c <DIO_SetPortDirection>
	DIO_SetPinDirection(u8ComPortCopy, u8ComPinCopy, PIN_OUTPUT);
  b4:	41 e0       	ldi	r20, 0x01	; 1
  b6:	6d 2f       	mov	r22, r29
  b8:	81 2f       	mov	r24, r17
  ba:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <DIO_SetPinDirection>
	switch(u8ComPinTypeCopy)
  be:	cc 23       	and	r28, r28
  c0:	19 f0       	breq	.+6      	; 0xc8 <Segment7_VidInit+0x2a>
  c2:	c1 30       	cpi	r28, 0x01	; 1
  c4:	39 f0       	breq	.+14     	; 0xd4 <Segment7_VidInit+0x36>
  c6:	0b c0       	rjmp	.+22     	; 0xde <Segment7_VidInit+0x40>
	{
		case comCathode:
		DIO_SetPinValue(u8ComPortCopy, u8ComPinCopy, PIN_LOW);
  c8:	40 e0       	ldi	r20, 0x00	; 0
  ca:	6d 2f       	mov	r22, r29
  cc:	81 2f       	mov	r24, r17
  ce:	0e 94 1e 01 	call	0x23c	; 0x23c <DIO_SetPinValue>
		break;
  d2:	05 c0       	rjmp	.+10     	; 0xde <Segment7_VidInit+0x40>
		case comAnode:
		DIO_SetPinValue(u8ComPortCopy, u8ComPinCopy, PIN_HIGH);
  d4:	41 e0       	ldi	r20, 0x01	; 1
  d6:	6d 2f       	mov	r22, r29
  d8:	81 2f       	mov	r24, r17
  da:	0e 94 1e 01 	call	0x23c	; 0x23c <DIO_SetPinValue>
		break;
	}
	Port7Segment = u8PortCopy;
  de:	00 93 70 00 	sts	0x0070, r16	; 0x800070 <Port7Segment>
	comPort = u8ComPortCopy;
  e2:	10 93 6d 00 	sts	0x006D, r17	; 0x80006d <comPort>
	comPin = u8ComPinCopy;
  e6:	d0 93 6e 00 	sts	0x006E, r29	; 0x80006e <comPin>
	comType = u8ComPinTypeCopy;
  ea:	c0 93 6f 00 	sts	0x006F, r28	; 0x80006f <comType>
}
  ee:	df 91       	pop	r29
  f0:	cf 91       	pop	r28
  f2:	1f 91       	pop	r17
  f4:	0f 91       	pop	r16
  f6:	08 95       	ret

000000f8 <Segment7_VidSetDisplay>:

void Segment7_VidSetDisplay(u8 u8SignalCopy)
{
	DIO_SetPortValue(Port7Segment,u8SignalCopy);
  f8:	68 2f       	mov	r22, r24
  fa:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <Port7Segment>
  fe:	0e 94 9f 01 	call	0x33e	; 0x33e <DIO_SetPortValue>
 102:	08 95       	ret

00000104 <Segment7_VidClearDisplay>:
}

void Segment7_VidClearDisplay()
{
	DIO_SetPortValue(Port7Segment, PORT_LOW);
 104:	60 e0       	ldi	r22, 0x00	; 0
 106:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <Port7Segment>
 10a:	0e 94 9f 01 	call	0x33e	; 0x33e <DIO_SetPortValue>
 10e:	08 95       	ret

00000110 <Segment7_VidEnableDisplay>:
}

void Segment7_VidEnableDisplay(u8 comPort,u8 comPin,u8 comType)
{
	switch(comType)
 110:	44 23       	and	r20, r20
 112:	29 f0       	breq	.+10     	; 0x11e <Segment7_VidEnableDisplay+0xe>
 114:	41 30       	cpi	r20, 0x01	; 1
 116:	31 f4       	brne	.+12     	; 0x124 <Segment7_VidEnableDisplay+0x14>
	{
		case comAnode:
		DIO_SetPinValue(comPort, comPin, PIN_HIGH);
 118:	0e 94 1e 01 	call	0x23c	; 0x23c <DIO_SetPinValue>
		break;
 11c:	08 95       	ret
		case comCathode:
		DIO_SetPinValue(comPort, comPin, PIN_LOW);
 11e:	40 e0       	ldi	r20, 0x00	; 0
 120:	0e 94 1e 01 	call	0x23c	; 0x23c <DIO_SetPinValue>
 124:	08 95       	ret

00000126 <Segment7_VidDisableDisplay>:
	}
}

void Segment7_VidDisableDisplay(u8 comPort,u8 comPin,u8 comType)
{
	switch(comType)
 126:	44 23       	and	r20, r20
 128:	19 f0       	breq	.+6      	; 0x130 <Segment7_VidDisableDisplay+0xa>
 12a:	41 30       	cpi	r20, 0x01	; 1
 12c:	29 f0       	breq	.+10     	; 0x138 <Segment7_VidDisableDisplay+0x12>
 12e:	08 95       	ret
	{
		case comCathode:
		DIO_SetPinValue(comPort, comPin, PIN_HIGH);
 130:	41 e0       	ldi	r20, 0x01	; 1
 132:	0e 94 1e 01 	call	0x23c	; 0x23c <DIO_SetPinValue>
		break;
 136:	08 95       	ret
		case comAnode:
		DIO_SetPinValue(comPort, comPin, PIN_LOW);
 138:	40 e0       	ldi	r20, 0x00	; 0
 13a:	0e 94 1e 01 	call	0x23c	; 0x23c <DIO_SetPinValue>
 13e:	08 95       	ret

00000140 <AppInit>:
	}
}

void AppInit (void)
{
	Segment7_VidInit(PORTA, PORTC, PIN0, comCathode);
 140:	20 e0       	ldi	r18, 0x00	; 0
 142:	40 e0       	ldi	r20, 0x00	; 0
 144:	62 e0       	ldi	r22, 0x02	; 2
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	0e 94 4f 00 	call	0x9e	; 0x9e <Segment7_VidInit>
	Segment7_VidInit(PORTA, PORTC, PIN1, comCathode);
 14c:	20 e0       	ldi	r18, 0x00	; 0
 14e:	41 e0       	ldi	r20, 0x01	; 1
 150:	62 e0       	ldi	r22, 0x02	; 2
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	0e 94 4f 00 	call	0x9e	; 0x9e <Segment7_VidInit>
	Segment7_VidClearDisplay();
 158:	0e 94 82 00 	call	0x104	; 0x104 <Segment7_VidClearDisplay>
	Segment7_VidEnableDisplay(PORTC, PIN0, comCathode);
 15c:	40 e0       	ldi	r20, 0x00	; 0
 15e:	60 e0       	ldi	r22, 0x00	; 0
 160:	82 e0       	ldi	r24, 0x02	; 2
 162:	0e 94 88 00 	call	0x110	; 0x110 <Segment7_VidEnableDisplay>
	Segment7_VidDisableDisplay(PORTC, PIN1, comCathode);
 166:	40 e0       	ldi	r20, 0x00	; 0
 168:	61 e0       	ldi	r22, 0x01	; 1
 16a:	82 e0       	ldi	r24, 0x02	; 2
 16c:	0e 94 93 00 	call	0x126	; 0x126 <Segment7_VidDisableDisplay>
 170:	08 95       	ret

00000172 <App_Start>:
}

void App_Start (void)
{
 172:	cf 93       	push	r28
					
					
					Segment7_VidEnableDisplay(PORTC, PIN0, comCathode);
 174:	40 e0       	ldi	r20, 0x00	; 0
 176:	60 e0       	ldi	r22, 0x00	; 0
 178:	82 e0       	ldi	r24, 0x02	; 2
 17a:	0e 94 88 00 	call	0x110	; 0x110 <Segment7_VidEnableDisplay>
					Segment7_VidDisableDisplay(PORTC, PIN1, comCathode);
 17e:	40 e0       	ldi	r20, 0x00	; 0
 180:	61 e0       	ldi	r22, 0x01	; 1
 182:	82 e0       	ldi	r24, 0x02	; 2
 184:	0e 94 93 00 	call	0x126	; 0x126 <Segment7_VidDisableDisplay>


					Segment7_VidSetDisplay(numbers[(count%10)]);
 188:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <count>
 18c:	cd ec       	ldi	r28, 0xCD	; 205
 18e:	ec 9f       	mul	r30, r28
 190:	81 2d       	mov	r24, r1
 192:	11 24       	eor	r1, r1
 194:	86 95       	lsr	r24
 196:	86 95       	lsr	r24
 198:	86 95       	lsr	r24
 19a:	88 0f       	add	r24, r24
 19c:	98 2f       	mov	r25, r24
 19e:	99 0f       	add	r25, r25
 1a0:	99 0f       	add	r25, r25
 1a2:	89 0f       	add	r24, r25
 1a4:	e8 1b       	sub	r30, r24
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	e0 5a       	subi	r30, 0xA0	; 160
 1aa:	ff 4f       	sbci	r31, 0xFF	; 255
 1ac:	80 81       	ld	r24, Z
 1ae:	0e 94 7c 00 	call	0xf8	; 0xf8 <Segment7_VidSetDisplay>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b2:	83 ec       	ldi	r24, 0xC3	; 195
 1b4:	99 e0       	ldi	r25, 0x09	; 9
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <App_Start+0x44>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <App_Start+0x4a>
 1bc:	00 00       	nop

					_delay_ms(10);

					Segment7_VidEnableDisplay(PORTC, PIN1, comCathode);
 1be:	40 e0       	ldi	r20, 0x00	; 0
 1c0:	61 e0       	ldi	r22, 0x01	; 1
 1c2:	82 e0       	ldi	r24, 0x02	; 2
 1c4:	0e 94 88 00 	call	0x110	; 0x110 <Segment7_VidEnableDisplay>
					Segment7_VidDisableDisplay(PORTC, PIN0, comCathode);
 1c8:	40 e0       	ldi	r20, 0x00	; 0
 1ca:	60 e0       	ldi	r22, 0x00	; 0
 1cc:	82 e0       	ldi	r24, 0x02	; 2
 1ce:	0e 94 93 00 	call	0x126	; 0x126 <Segment7_VidDisableDisplay>

					Segment7_VidSetDisplay(numbers[(count/10)]);
 1d2:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <count>
 1d6:	ec 9f       	mul	r30, r28
 1d8:	e1 2d       	mov	r30, r1
 1da:	11 24       	eor	r1, r1
 1dc:	e6 95       	lsr	r30
 1de:	e6 95       	lsr	r30
 1e0:	e6 95       	lsr	r30
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	e0 5a       	subi	r30, 0xA0	; 160
 1e6:	ff 4f       	sbci	r31, 0xFF	; 255
 1e8:	80 81       	ld	r24, Z
 1ea:	0e 94 7c 00 	call	0xf8	; 0xf8 <Segment7_VidSetDisplay>
 1ee:	83 ec       	ldi	r24, 0xC3	; 195
 1f0:	99 e0       	ldi	r25, 0x09	; 9
 1f2:	01 97       	sbiw	r24, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <App_Start+0x80>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <App_Start+0x86>
 1f8:	00 00       	nop

					_delay_ms(10);

					internal_count++;
 1fa:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
 1fe:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <__data_end+0x1>
 202:	01 96       	adiw	r24, 0x01	; 1
 204:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__data_end+0x1>
 208:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>

					if(internal_count==50){
 20c:	c2 97       	sbiw	r24, 0x32	; 50
 20e:	49 f4       	brne	.+18     	; 0x222 <App_Start+0xb0>
						internal_count=0;
 210:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <__data_end+0x1>
 214:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end>
						count++;
 218:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <count>
 21c:	8f 5f       	subi	r24, 0xFF	; 255
 21e:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <count>
					}

					if(count==100){
 222:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <count>
 226:	84 36       	cpi	r24, 0x64	; 100
 228:	11 f4       	brne	.+4      	; 0x22e <App_Start+0xbc>
						count=0;
 22a:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <count>
					}
 22e:	cf 91       	pop	r28
 230:	08 95       	ret

00000232 <main>:

/* Initialize Application */

int main(void)
{
	AppInitialize();
 232:	0e 94 49 00 	call	0x92	; 0x92 <AppInitialize>

	while (1)
	{
		/* Starting Application */
		
		AppStart();
 236:	0e 94 4c 00 	call	0x98	; 0x98 <AppStart>
 23a:	fd cf       	rjmp	.-6      	; 0x236 <main+0x4>

0000023c <DIO_SetPinValue>:

		/* Check on the Required PORT Number */
		switch (u8PortIdCopy)
		{
			case PORTA: TOG_BIT(PORTA_Register,u8PinIdCopy); break;
			case PORTC: TOG_BIT(PORTC_Register,u8PinIdCopy); break;
 23c:	41 30       	cpi	r20, 0x01	; 1
 23e:	d9 f4       	brne	.+54     	; 0x276 <DIO_SetPinValue+0x3a>
 240:	88 23       	and	r24, r24
 242:	19 f0       	breq	.+6      	; 0x24a <DIO_SetPinValue+0xe>
 244:	82 30       	cpi	r24, 0x02	; 2
 246:	61 f0       	breq	.+24     	; 0x260 <DIO_SetPinValue+0x24>
 248:	08 95       	ret
 24a:	2b b3       	in	r18, 0x1b	; 27
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	02 c0       	rjmp	.+4      	; 0x256 <DIO_SetPinValue+0x1a>
 252:	88 0f       	add	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	6a 95       	dec	r22
 258:	e2 f7       	brpl	.-8      	; 0x252 <DIO_SetPinValue+0x16>
 25a:	82 2b       	or	r24, r18
 25c:	8b bb       	out	0x1b, r24	; 27
 25e:	08 95       	ret
 260:	25 b3       	in	r18, 0x15	; 21
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	02 c0       	rjmp	.+4      	; 0x26c <DIO_SetPinValue+0x30>
 268:	88 0f       	add	r24, r24
 26a:	99 1f       	adc	r25, r25
 26c:	6a 95       	dec	r22
 26e:	e2 f7       	brpl	.-8      	; 0x268 <DIO_SetPinValue+0x2c>
 270:	82 2b       	or	r24, r18
 272:	85 bb       	out	0x15, r24	; 21
 274:	08 95       	ret
 276:	41 11       	cpse	r20, r1
 278:	1c c0       	rjmp	.+56     	; 0x2b2 <DIO_SetPinValue+0x76>
 27a:	88 23       	and	r24, r24
 27c:	19 f0       	breq	.+6      	; 0x284 <DIO_SetPinValue+0x48>
 27e:	82 30       	cpi	r24, 0x02	; 2
 280:	69 f0       	breq	.+26     	; 0x29c <DIO_SetPinValue+0x60>
 282:	08 95       	ret
 284:	2b b3       	in	r18, 0x1b	; 27
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_SetPinValue+0x54>
 28c:	88 0f       	add	r24, r24
 28e:	99 1f       	adc	r25, r25
 290:	6a 95       	dec	r22
 292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_SetPinValue+0x50>
 294:	80 95       	com	r24
 296:	82 23       	and	r24, r18
 298:	8b bb       	out	0x1b, r24	; 27
 29a:	08 95       	ret
 29c:	25 b3       	in	r18, 0x15	; 21
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <DIO_SetPinValue+0x6c>
 2a4:	88 0f       	add	r24, r24
 2a6:	99 1f       	adc	r25, r25
 2a8:	6a 95       	dec	r22
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <DIO_SetPinValue+0x68>
 2ac:	80 95       	com	r24
 2ae:	82 23       	and	r24, r18
 2b0:	85 bb       	out	0x15, r24	; 21
 2b2:	08 95       	ret

000002b4 <DIO_SetPinDirection>:
 2b4:	41 30       	cpi	r20, 0x01	; 1
 2b6:	d9 f4       	brne	.+54     	; 0x2ee <DIO_SetPinDirection+0x3a>
 2b8:	88 23       	and	r24, r24
 2ba:	19 f0       	breq	.+6      	; 0x2c2 <DIO_SetPinDirection+0xe>
 2bc:	82 30       	cpi	r24, 0x02	; 2
 2be:	61 f0       	breq	.+24     	; 0x2d8 <DIO_SetPinDirection+0x24>
 2c0:	08 95       	ret
 2c2:	2a b3       	in	r18, 0x1a	; 26
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	02 c0       	rjmp	.+4      	; 0x2ce <DIO_SetPinDirection+0x1a>
 2ca:	88 0f       	add	r24, r24
 2cc:	99 1f       	adc	r25, r25
 2ce:	6a 95       	dec	r22
 2d0:	e2 f7       	brpl	.-8      	; 0x2ca <DIO_SetPinDirection+0x16>
 2d2:	82 2b       	or	r24, r18
 2d4:	8a bb       	out	0x1a, r24	; 26
 2d6:	08 95       	ret
 2d8:	24 b3       	in	r18, 0x14	; 20
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <DIO_SetPinDirection+0x30>
 2e0:	88 0f       	add	r24, r24
 2e2:	99 1f       	adc	r25, r25
 2e4:	6a 95       	dec	r22
 2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <DIO_SetPinDirection+0x2c>
 2e8:	82 2b       	or	r24, r18
 2ea:	84 bb       	out	0x14, r24	; 20
 2ec:	08 95       	ret
 2ee:	41 11       	cpse	r20, r1
 2f0:	1c c0       	rjmp	.+56     	; 0x32a <DIO_SetPinDirection+0x76>
 2f2:	88 23       	and	r24, r24
 2f4:	19 f0       	breq	.+6      	; 0x2fc <DIO_SetPinDirection+0x48>
 2f6:	82 30       	cpi	r24, 0x02	; 2
 2f8:	69 f0       	breq	.+26     	; 0x314 <DIO_SetPinDirection+0x60>
 2fa:	08 95       	ret
 2fc:	2a b3       	in	r18, 0x1a	; 26
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	02 c0       	rjmp	.+4      	; 0x308 <DIO_SetPinDirection+0x54>
 304:	88 0f       	add	r24, r24
 306:	99 1f       	adc	r25, r25
 308:	6a 95       	dec	r22
 30a:	e2 f7       	brpl	.-8      	; 0x304 <DIO_SetPinDirection+0x50>
 30c:	80 95       	com	r24
 30e:	82 23       	and	r24, r18
 310:	8a bb       	out	0x1a, r24	; 26
 312:	08 95       	ret
 314:	24 b3       	in	r18, 0x14	; 20
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	02 c0       	rjmp	.+4      	; 0x320 <DIO_SetPinDirection+0x6c>
 31c:	88 0f       	add	r24, r24
 31e:	99 1f       	adc	r25, r25
 320:	6a 95       	dec	r22
 322:	e2 f7       	brpl	.-8      	; 0x31c <DIO_SetPinDirection+0x68>
 324:	80 95       	com	r24
 326:	82 23       	and	r24, r18
 328:	84 bb       	out	0x14, r24	; 20
 32a:	08 95       	ret

0000032c <DIO_SetPortDirection>:


/* IO Ports */
void DIO_SetPortDirection(u8 u8PortIdCopy,u8 u8PortDirCopy)
{
	switch(u8PortIdCopy)
 32c:	88 23       	and	r24, r24
 32e:	19 f0       	breq	.+6      	; 0x336 <DIO_SetPortDirection+0xa>
 330:	82 30       	cpi	r24, 0x02	; 2
 332:	19 f0       	breq	.+6      	; 0x33a <DIO_SetPortDirection+0xe>
 334:	08 95       	ret
	{
		case PORTA : DDRA_Register = u8PortDirCopy; break;
 336:	6a bb       	out	0x1a, r22	; 26
 338:	08 95       	ret
		case PORTC : DDRC_Register = u8PortDirCopy; break;
 33a:	64 bb       	out	0x14, r22	; 20
 33c:	08 95       	ret

0000033e <DIO_SetPortValue>:
	}

}
void DIO_SetPortValue(u8 u8PortIdCopy,u8 u8PortValCopy)
{
	switch(u8PortIdCopy)
 33e:	88 23       	and	r24, r24
 340:	19 f0       	breq	.+6      	; 0x348 <DIO_SetPortValue+0xa>
 342:	82 30       	cpi	r24, 0x02	; 2
 344:	19 f0       	breq	.+6      	; 0x34c <DIO_SetPortValue+0xe>
 346:	08 95       	ret
	{
		case PORTA : PORTA_Register = u8PortValCopy; break;
 348:	6b bb       	out	0x1b, r22	; 27
 34a:	08 95       	ret
		case PORTC : PORTC_Register = u8PortValCopy; break;
 34c:	65 bb       	out	0x15, r22	; 21
 34e:	08 95       	ret

00000350 <_exit>:
 350:	f8 94       	cli

00000352 <__stop_program>:
 352:	ff cf       	rjmp	.-2      	; 0x352 <__stop_program>
